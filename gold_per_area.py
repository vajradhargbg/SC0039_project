"""
This script is intended to read an imod logfile for immunoEM images modelled with IMOD and calculate gold/area.

Author:  vajradhar acharya        vajradhar.shripad.acharya@gu.se
"""

#Before running this script, use areas.com to create areas.log file from your .mod file (see readme for instructions)
#This script will create a directory called "temporary", which can be deleted afterwards
#If you wish to run the script again, delete the temporary folder and rename the .csv file or it will be overwritten
#Output is a csv called "gold_per_area.csv"

#name of the .log file generated by areas.com, in quotation marks: e.g. "areas.log"
log_file = "areas.log"

#Name of the structure of interest in the .mod file, in quotation.  e.g. "Flagellum Principal Piece"
structure_name = "flgellum_principal_piece"

#Name of the scattered points object in .mod file used to model gold
gold_model_name = "gold_principal_piece"

#Name of a second inner structure, that you wish to subtract from area of structure of interest
#e.g. if structure_name = "mitochondria", subtraction_structure_name may be "cristae"
#If you do not wish to subtract a structure, enter False (no quotations)
subtraction_structure_name = False

#If you wish to convert units from nm to um, nm_to_um = True (no quotations)
#ONLY do this if units in model header are in nm
#If you wish to retain units (such as um or pixels), nm_to_um = False .Output will be in whatever units the imod header are in
nm_to_um = True

#####################################################################################################################
### Do not edit below here!!                                                                                       ###
#####################################################################################################################

import os
import tempfile
import csv

def read_object(text):
    """
Parses the data in info file for a single object.
Input "text" is a list of strings, each string is a line in the original imod info file.  The list as a whole represents data
for 1 object.
Returns a dictionary containing info for that object.  Within the dictionary is a list of dictionaries,
containing information for each contour.

Currently I don't work with open objects so it may not be super compatible with them. Please use scattered points object.
"""
    
    ####Note to self: work on scattered points
    object_info = {}
    object_info["contours"] = []
    
    #FCombine all lines to make it easier to search for object type
    combined = '\n'.join(text)
   
    #Check if object is open or closed.  4th line will contain this info.
    if "closed" in combined:
        object_type = "closed"
    elif "open" in combined:
        object_type = "open"
    elif "scattered" in combined:
        object_type = "scattered_points"
    object_info["type"] = object_type
        
    
                
                